const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql');
const multer  = require('multer');

const path = require('path');
const fs = require('fs');

const app = express();
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});

const upload = multer({ storage: storage });
const hostname = '0.0.0.0';
const port = 3000;

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
// Static folder for serving uploaded images


// Database connection
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '1234',
  database: 'foodapp',
  dateStrings: true
}); 

connection.connect((err) => {
  if (err) {
    console.error('Error connecting to database:', err);
    return;
  }
  console.log('Connected to database!');
});



// Định nghĩa thư mục chứa ảnh uploads
const uploadsDir = path.join(__dirname, 'uploads');

// Sử dụng express.static để cung cấp truy cập tĩnh đến thư mục uploads
app.use('/uploads', express.static(uploadsDir));


// API endpoint for login
app.post('/login', (req, res) => {
  const { useraccname, password } = req.body;
  if (!useraccname ||!password) {
    return res.status(400).json({ error: 'Useraccname and password are required' });
  }

  const query = 'SELECT * FROM users WHERE useraccname =? AND password =?';
  connection.query(query, [useraccname, password], (err, results) => {
    if (err) {
      console.error('Error executing query:', err.sqlMessage);
      return res.status(500).json({ error: 'Internal server error' });
    }

    if (results.length === 0) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }

    const user = results[0];
    // Return user object with correct property names
    res.status(200).json({ message: 'Login successful', user: {
      user_id: user.user_id,
      username: user.username,
      useraccname: user.useraccname,
      email: user.email,
      avatar_image: user.avatar_image,
      cover_image: user.cover_image,
      is_admin: user.is_admin
    } });
  });
});

app.get('/user/:useraccname', (req, res) => {
  const useraccname = req.params.useraccname;

  const query = 'SELECT user_id,username,useraccname,email,avatar_image,cover_image,is_admin FROM users WHERE useraccname =?';
  connection.query(query, [useraccname], (err, results) => {
    if (err) {
      console.error('Error executing query:', err.sqlMessage);
      return res.status(500).json({ error: 'Internal server error' });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }

    const user = results[0];
    // Return user object with correct property names
    res.status(200).json({ message: 'User found', user: {
      user_id: user.user_id,
      username: user.username,
      useraccname: user.useraccname,
      email: user.email,
      avatar_image: user.avatar_image,
      cover_image: user.cover_image,
      is_admin: user.is_admin
    } });
  });
});


app.post('/api/createposts', upload.array('images', 10), (req, res) => {
  const { post_title, post_content, isRecipe, user_id, post_group } = req.body;
  const imageUrls = req.files.map(file => `http://172.16.4.192:3000/uploads/${file.filename}`); // Lấy đường dẫn của các ảnh đã tải lên

  // let imageUrls = [];
  // if (req.files.length > 0) {
  //   // Nếu có ảnh, lấy đường dẫn của các ảnh đã tải lên
  //   imageUrls = req.files.map(file => `http://172.16.4.192:3000/uploads/${file.filename}`);
  // } else {
  //   // Nếu không có ảnh, gán một chuỗi rỗng vào imageUrls
  //   imageUrls.push('');
  // }

  // Lưu thông tin bài viết vào CSDL
  const query = 'INSERT INTO posts (post_title, post_content, is_recipe, user_id, post_group) VALUES (?, ?, ?, ?, ?)';
  connection.query(query, [post_title, post_content, isRecipe, user_id, post_group], (error, results, fields) => {
    if (error) throw error;

    const post_id = results.insertId;

    // Lưu đường dẫn của ảnh vào CSDL
    imageUrls.forEach(imageUrl => {
      connection.query('INSERT INTO photos (post_id, image_url) VALUES (?, ?)', [post_id, imageUrl], (error, results, fields) => {
        if (error) throw error;
      });
    });

    res.status(201).send('Post created successfully');
  });
});




app.delete('/api/deleteposts/:postId', (req, res) => {
  const postId = req.params.postId;

  // Kiểm tra xem postId có tồn tại không
  connection.query('SELECT * FROM posts WHERE post_id = ?', [postId], (selectErr, selectResults) => {
    if (selectErr) {
      console.error('Lỗi khi kiểm tra bài viết:', selectErr);
      return res.status(500).json({ error: 'Lỗi máy chủ nội bộ' });
    }

    // Nếu postId không tồn tại, trả về lỗi 404
    if (selectResults.length === 0) {

      return res.status(404).json({ error: 'Không tìm thấy bài viết' });
    }

    // Bắt đầu xóa bài viết, các ảnh liên quan, bình luận và lượt thích
    connection.beginTransaction((beginTransactionErr) => {
      if (beginTransactionErr) {
        console.error('Lỗi khi bắt đầu giao dịch:', beginTransactionErr);
        return res.status(500).json({ error: 'Lỗi máy chủ nội bộ' });
      }

      // Xóa tất cả các ảnh liên quan đến bài viết từ bảng photos
      connection.query('DELETE FROM photos WHERE post_id = ?', [postId], (deletePhotosErr, deletePhotosResults) => {
        if (deletePhotosErr) {
          connection.rollback(() => {
            console.error('Lỗi khi xóa ảnh liên quan:', deletePhotosErr);
            return res.status(500).json({ error: 'Lỗi máy chủ nội bộ' });
          });
        }

        // Xóa tất cả các bình luận liên quan đến bài viết từ bảng comments
        connection.query('DELETE FROM comments WHERE post_id = ?', [postId], (deleteCommentsErr, deleteCommentsResults) => {
          if (deleteCommentsErr) {
            connection.rollback(() => {
              console.error('Lỗi khi xóa bình luận liên quan:', deleteCommentsErr);
              return res.status(500).json({ error: 'Lỗi máy chủ nội bộ' });
            });
          }

          // Xóa tất cả các lượt thích liên quan đến bài viết từ bảng likes
          connection.query('DELETE FROM likes WHERE post_id = ?', [postId], (deleteLikesErr, deleteLikesResults) => {
            if (deleteLikesErr) {
              connection.rollback(() => {
                console.error('Lỗi khi xóa lượt thích liên quan:', deleteLikesErr);
                return res.status(500).json({ error: 'Lỗi máy chủ nội bộ' });
              });
            }

            // Cuối cùng, xóa bài viết từ bảng posts
            connection.query('DELETE FROM posts WHERE post_id = ?', [postId], (deletePostErr, deletePostResults) => {
              if (deletePostErr) {
                connection.rollback(() => {
                  console.error('Lỗi khi xóa bài viết:', deletePostErr);
                  return res.status(500).json({ error: 'Lỗi máy chủ nội bộ' });
                });
              }

              // Commit giao dịch
              connection.commit((commitErr) => {
                if (commitErr) {
                  connection.rollback(() => {
                    console.error('Lỗi khi commit giao dịch:', commitErr);
                    return res.status(500).json({ error: 'Lỗi máy chủ nội bộ' });
                  });
                }

                // Nếu xóa thành công, trả về thông báo thành công
                res.status(200).json({ message: 'Xóa bài viết và các liên quan thành công' });
              });
            });
          });
        });
      });
    });
  });
});

app.get('/api/search', (req, res) => {
  const { groupId, searchText } = req.query;
  
  let query = `
    SELECT 
      users.avatar_image, 
      posts.*, 
      users.username, 
      GROUP_CONCAT(DISTINCT photos.image_url ORDER BY photos.photo_id) AS imageUrls, 
      COUNT(DISTINCT likes.like_id) AS likeCount, 
      COUNT(DISTINCT comments.comment_id) AS commentCount 
    FROM 
      posts 
    JOIN 
      users ON posts.user_id = users.user_id 
    LEFT JOIN 
      photos ON posts.post_id = photos.post_id 
    LEFT JOIN 
      likes ON posts.post_id = likes.post_id 
    LEFT JOIN 
      comments ON posts.post_id = comments.post_id 
  `;
  
  let conditions = [];
  let params = [];
  
  if (groupId !=0) {
    conditions.push('posts.post_group = ?');
    params.push(groupId);
  }
  
  if (searchText) {
    conditions.push('(posts.post_title LIKE ? OR posts.post_content LIKE ?)');
    params.push(`%${searchText}%`, `%${searchText}%`);
  }
  
  if (conditions.length > 0) {
    query += ' WHERE ' + conditions.join(' AND ');
  }
  
  query += `
    GROUP BY 
      posts.post_id, 
      users.avatar_image, 
      users.username 
    ORDER BY 
      posts.created_at DESC
  `;
  
  connection.query(query, params, (err, results) => {
    if (err) {
      console.error('Lỗi thực thi truy vấn:', err);
      return res.status(500).json({ error: 'Lỗi máy chủ nội bộ' });
    }
    res.json(results);
  });
});

app.post('/likepost', (req, res) => {
  const { userId, postId } = req.body;
  if (!userId || !postId) {
    return res.status(400).json({ error: 'Missing userId or postId' });
  }

  const checkQuery = 'SELECT * FROM likes WHERE user_id = ? AND post_id = ?';
  connection.query(checkQuery, [userId, postId], (checkErr, checkResults) => {
    if (checkErr) {
      console.error('Error checking like:', checkErr.stack);
      return res.status(500).json({ error: 'Internal server error' });
    }

    if (checkResults.length > 0) {
      unlikePost(userId, postId, res);
    } else {
      likePost(userId, postId, res);
    }
  });
});

const likePost = (userId, postId, res) => {
  const likeQuery = 'INSERT INTO likes (user_id, post_id) VALUES (?, ?)';
  connection.query(likeQuery, [userId, postId], (likeErr, likeResults) => {
    if (likeErr) {
      console.error('Error liking post:', likeErr.stack);
      return res.status(500).json({ error: 'Internal server error' });
    }
    res.status(200).json({ message: 'Post liked successfully' });
    // updateLikeCount(postId, res);
  });
};

const unlikePost = (userId, postId, res) => {
  const unlikeQuery = 'DELETE FROM likes WHERE user_id = ? AND post_id = ?';
  connection.query(unlikeQuery, [userId, postId], (unlikeErr, unlikeResults) => {
    if (unlikeErr) {
      console.error('Error unliking post:', unlikeErr.stack);
      return res.status(500).json({ error: 'Internal server error' });
    }
    res.status(200).json({ message: 'Post unliked successfully' });
    // updateLikeCount(postId, res);
  });
};



app.get('/comments/:post_id', (req, res) => {
  const postId = req.params.post_id;
  const sql = `SELECT u.avatar_image, u.username, c.*
               FROM comments c
               INNER JOIN users u ON c.user_id = u.user_id
               WHERE c.post_id = ?
               ORDER BY c.created_at DESC;`;

  connection.query(sql, [postId], (err, result) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(result);
  });
});


app.post('/addcomment', (req, res) => {
  const { userId, postId, commentContent } = req.body;

  // Kiểm tra xem các trường bắt buộc đã được cung cấp hay chưa
  if (!userId || !postId || !commentContent) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  // Thêm comment vào cơ sở dữ liệu
  const query = `
    INSERT INTO comments (user_id, post_id, comment_content)
    VALUES (?, ?, ?)
  `;
  connection.query(query, [userId, postId, commentContent], (err, results) => {
    if (err) {
      console.error('Error adding comment:', err.stack);
      return res.status(500).json({ error: 'Internal server error' });
    }

    // Trả về kết quả thành công nếu không có lỗi
    res.status(200).json({ message: 'Comment added successfully' });
  });
});


app.delete('/api/deletecomments/:commentId', (req, res) => {
  const commentId = req.params.commentId;

  // Xóa comment từ bảng comments
  const deleteCommentQuery = 'DELETE FROM comments WHERE comment_id = ?';

  connection.query(deleteCommentQuery, [commentId], (err, result) => {
    if (err) {
      console.error('Error deleting comment:', err.stack);
      return res.status(500).json({ error: 'Internal server error' });
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Comment not found' });
    }

    res.status(200).json({ message: 'Comment deleted successfully' });
  });
});

app.get('/api/advertisements', (req, res) => {
  const query = 'SELECT * FROM advertisement;';
  connection.query(query, (err, results) => {
      if (err) throw err;
      const imageUrls = results.map(row => row.advertisement_image);
      res.json({ advertisement: imageUrls });
  });
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

app.get('/post/:post_id', (req, res) => {
  const post_id = req.query.post_id;
  const userId = req.query.user_id;
  // Thực hiện truy vấn cơ sở dữ liệu để lấy thông tin của bài đăng dựa trên post_id
  const query = `
  SELECT 
      users.avatar_image,
      posts.*,
      users.username,
	  GROUP_CONCAT(DISTINCT photos.image_url ORDER BY photos.photo_id) AS imageUrls,
	  COUNT(DISTINCT likes.like_id) AS likeCount,
    (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
    FROM likes 
    WHERE likes.post_id = posts.post_id AND likes.user_id = ?) AS isLiked,
   COUNT(DISTINCT comments.comment_id) AS commentCount
    FROM 
      posts 
    JOIN 
      users  ON posts.user_id = users.user_id
    LEFT JOIN 
      photos ON posts.post_id = photos.post_id
    LEFT JOIN 
      likes ON posts.post_id = likes.post_id
    LEFT JOIN 
      comments ON posts.post_id = comments.post_id
    WHERE 
      posts.post_id = ?
    GROUP BY 
      posts.post_id, users.avatar_image, users.username
    ORDER BY 
      posts.created_at DESC;


`;
  connection.query(query, [userId, post_id], (err, results) => {
    if (err) {
      console.error('Error retrieving post:', err.stack);
      return res.status(500).json({ error: 'Internal server error' });
    }
    
    // Kiểm tra xem bài đăng có tồn tại không
    if (results.length === 0) {
      return res.status(404).json({ error: 'Post not found' });
    }

    // Trả về thông tin chi tiết của bài đăng
    const post = results[0];
    res.status(200).json(post);
  });
});


// 
app.post('/signup', (req, res) => {
  const { username, useraccname, email, password, avatar_image, cover_image } = req.body;
  if (!username || !useraccname || !email || !password) {
    return res.status(400).json({ error: 'All fields are required' });
  }


  connection.query('SELECT * FROM users WHERE useraccname = ?', [useraccname], (err, results) => {
    if (err) {
      
      return res.status(500).json({ error: 'Internal server error' });
    }
    if (results.length > 0) {
      return res.status(400).json({ error: 'Account ID already exists' });
    }

    
    connection.query('INSERT INTO users (username, useraccname, email, password, avatar_image, cover_image) VALUES (?, ?, ?, ?,"","")', [username, useraccname, email, password, avatar_image, cover_image], (err, results) => {
      if (err) {
        console.error('Error inserting new user:', err);
        return res.status(500).json({ error: 'Internal server error' });
      }
    
      res.status(201).json({ message: 'User registration successful' });
    });
  });
});


app.get('/popularposts', (req, res) => {
  const userId = req.query.user_id;
  let daysInterval = 30; // Khởi đầu với 30 ngày

  const getPopularPosts = (days) => {
    const query = `
      SELECT 
        users.avatar_image,
        posts.*,
        users.username,
        GROUP_CONCAT(DISTINCT photos.image_url ORDER BY photos.photo_id) AS imageUrls,
        COUNT(DISTINCT likes.like_id) AS likeCount,
        (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
         FROM likes 
         WHERE likes.post_id = posts.post_id AND likes.user_id = ?) AS isLiked,
        COUNT(DISTINCT comments.comment_id) AS commentCount
      FROM 
        posts 
      JOIN 
        users  ON posts.user_id = users.user_id
      LEFT JOIN 
        photos ON posts.post_id = photos.post_id
      LEFT JOIN 
        likes ON posts.post_id = likes.post_id
      LEFT JOIN 
        comments ON posts.post_id = comments.post_id
      WHERE 
        posts.created_at >= DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL ? DAY)
      GROUP BY 
        posts.post_id
      ORDER BY 
        likeCount DESC
      LIMIT 5;
    `;
    
    // Thực hiện truy vấn với khoảng thời gian hiện tại
    connection.query(query, [userId, days], (err, results) => {
      if (err) throw err;
      
      // Nếu số lượng bài viết ít hơn 5 và khoảng thời gian chưa quá lớn, tăng khoảng thời gian và thử lại
      if (results.length < 5 && days < 365) {
        getPopularPosts(days + 30); // Tăng khoảng thời gian lên 30 ngày
      } else {
        // Trả về kết quả nếu đủ bài viết hoặc đã tăng khoảng thời gian đến mức tối đa
        res.json(results);
      }
    });
  };

  // Bắt đầu với khoảng thời gian ban đầu
  getPopularPosts(daysInterval);
});


app.get('/allposts', (req, res) => {
  const userId = req.query.user_id;
  // console.log("User ID:", userId); 
  const query = `
  SELECT 
      users.avatar_image,
      posts.*,
      users.username,
      GROUP_CONCAT(DISTINCT photos.image_url ORDER BY photos.photo_id) AS imageUrls,
      COUNT(DISTINCT likes.like_id) AS likeCount,
      (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
       FROM likes 
       WHERE likes.post_id = posts.post_id AND likes.user_id = ?) AS isLiked,
      COUNT(DISTINCT comments.comment_id) AS commentCount
    FROM 
      posts 
    JOIN 
      users  ON posts.user_id = users.user_id
    LEFT JOIN 
      photos ON posts.post_id = photos.post_id
    LEFT JOIN 
      likes ON posts.post_id = likes.post_id
    LEFT JOIN 
      comments ON posts.post_id = comments.post_id
    GROUP BY 
      posts.post_id, users.avatar_image, users.username
    ORDER BY 
      posts.created_at DESC;
  `;
  // Execute the query and return the results
  connection.query(query, [userId], (err, results) => {
    if (err) throw err;
    res.json(results);
  });
});


app.get('/users', (req, res) => {
  const query = 'SELECT * FROM users';
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error executing query:', err);
      return res.status(500).json({ error: 'Internal server error' });
    }
    res.status(200).json({ users: results });
  });
});


// Start the server
app.listen(port, hostname, () => {
    console.log(`Server running at http://${hostname}:${port}/`);
});
